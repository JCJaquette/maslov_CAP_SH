function [resonant_bundle_strc] = Compute_Resonant_Bundles(mu_s,vs1,g_1,params)
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

resonant_bundle_strc =0;
[N,M] = size(vs1);
N=max([N,M]);
N=N-1;

vs2=vs1';

vs1_shift = -4*(K_op(vs1,mu_s,3)+K_op(vs1,mu_s,1));
vs2_shift = -4*(K_op(vs2,mu_s,3)+K_op(vs2,mu_s,1));
% Shift Down
shift1_down = diag(1+0*(1:N),-1);
vs1_shift=shift1_down*vs1_shift;
vs2_shift=shift1_down*vs2_shift;
% K_op(vs1,mu_s,3)

[A_dag] = A_dagger(mu_s,g_1,vs1_shift,vs2_shift,params);
% null(A_dag);
A_dag_short=A_dag(2:end,2:end);
% disp('null')
% null(A_dag_short)

g_1_vec = reshape(g_1,(N+1)^2,1);

g_1_vec(1)=[];

sol = -A_dag_short\g_1_vec;

sol_mat = [0;sol];
sol_mat =reshape(sol_mat,N+1,N+1);

% out1 = A_dag*[0;sol];
% out2 = out1 - [0;g_1_vec];

surf(log(abs(sol_mat))/log(10))
sol=intval(1)*sol;
mu_s=intval(1)*mu_s;
fout = F_op(sol,mu_s,vs1_shift,vs2_shift,g_1,params);

% sol

A_N = inv(A_dag_short);

Z_0 = norm(eye((N+1)^2-1)*intval(1)-intval(A_N)*intval(A_dag_short));

% Z_1 Calc
beta = real(mu_s);
gamma = imag(mu_s);
mu=params(1);

A_infty_bound = ((4*(N-1)^2*beta^2*gamma^2/(beta^2+gamma^2)-1)^2-mu);
Z_1 = sum(abs(g_1),'all')/A_infty_bound ; % Also needs the difference in the finite part.

Y_0 = calc_Y_0(A_N,sol,mu_s,vs1_shift,vs2_shift,g_1,params);

Y_0
Y_0_hat = 
Z_0
Z_1

r_min = intval(Y_0.sup)/(1-Z_0-Z_1)
r_min.sup
% keyboard
return 

 
 